import unittest
import os, sys

#current_directory = os.getcwd()
#if current_directory not in sys.path:
#   sys.path.append(current_directory)
    
from main import sign_pairs

def _sign_pairs(numbers):
    numbers = [int(n) for n in numbers.split()]
    pairs = []
    i = 0
    while i < len(numbers) - 1:
        if (numbers[i] > 0 and numbers[i + 1] > 0) or (numbers[i] < 0 and numbers[i + 1] < 0):
            pairs.append([numbers[i], numbers[i + 1]])
            i += 2
        else:
            i += 1
    return pairs
    
data = [
    "1 -2 3 4 -5 6 7 8 -9 10",
    "1 -2 3 -5 6 -7 8 -9 10",
    "1 2 3 4 5 6 7 8 9 10",
    "1 -2 3 -4 5 -6 7 -8 9 -10",
    "1 -2 3 -4 5 -6 7 -8 9 -10 11",
    "1 -2 3 -4 5 -6 7 -8 9 -10 11 -12",
    "-1 -2 -3 -4 -5 -6 -7 -8 -9 -10",
    "10 -9 8 -7 6 -5 4 -3 2 -1",
    "1 2 3 4 5 6 7 8 9 10 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10",
    "-1 -2 -3 -4 -5 -6 -7 -8 -9 -10 1 2 3 4 5 6 7 8 9 10",
    "1 1 1 1 1 1 1 1 1 1",
    "1 -1 1 -1 1 -1 1 -1 1 -1",
    "0 0 0 0 0 0 0 0 0 0",
    "1 0 1 0 1 0 1 0 1 0",
    "1 0 1 0 1 0 1 0 1 0 1",
    "1 0 1 0 1 0 1 0 1 0 1 0",
    "1 -1 1 -1 1 -1 1 -1 1 -1 1",
    "1 -1 1 -1 1 -1 1 -1 1 -1 1 -1",
    "1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1",
    "1 -1 1 -1 1 -1 1 -1 1 -1 1 -1 1 -1",
    "1 2 3 4 5 6 7 8 9 10 10 9 8 7 6 5 4 3 2 1",
    "10 9 8 7 6 5 4 3 2 1 1 2 3 4 5 6 7 8 9 10",
    "10 9 8 7 6 5 4 3 2 1 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10",
    "1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10",
    "1 -1 2 -2 3 -3 4 -4 5 -5 6 -6 7 -7 8 -8 9 -9 10 -10",
    "0 1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10",
    "1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0",
    "1 0 2 0 3 0 4 0 5 0 6 0 7 0 8 0 9 0 10 0 0",
    "1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6 7 7 7",
    "1 -1 1 2 -2 2 3 -3 3 4 -4 4 5 -5 5 6 -6 6 7 -7 7",
    "0 1 0 1 0 2 0 2 0 3 0 3 0 4 0 4 0 5 0 5 0 6",
    "1 0 1 0 2 0 2 0 3 0 3 0 4 0 4 0 5 0 5 0 6 0",
    "1 0 1 0 2 0 2 0 3 0 3 0 4 0 4 0 5 0 5 0 6 0 0",
    "1 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10 10 10",
    "1 -1 1 2 -2 2 3 -3 3 4 -4 4 5 -5 5 6 -6 6 7 -7 7 8",
    "0 1 0 1 0 2 0 2 0 3 0 3 0 4 0 4 0 5 0 5 0 6 0",
    "1 0 1 0 2 0 2 0 3 0 3 0 4 0 4 0 5 0 5 0 5 0 0",
    "1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6 7 7 7 8 8",
    "1 -1 1 2 -2 2 3 -3 3 4 -4 4 5 -5 5 6 -6 6 7 -7 7 8",
    "0 1 0 1 0 2 0 2 0 3 0 3 0 4 0 4 0 5 0 5 0 5 0 0",
    "1 0 1 0 2 0 2 0 3 0 3 0 4 0 4 0 5 0 5 0 5 0 0 0",
    "1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6 7 7 7 8 8 8",
    "1 -1 1 2 -2 2 3 -3 3 4 -4 4 5 -5 5 6 -6 6 7 -7 7 8 -8",
    "0 1 0 1 0 2 0 2 0 3 0 3 0 4 0 4 0 5 0 5 0 5 0 0 0",
    "1 0 1 0 2 0 2 0 3 0 3 0 4 0 4 0 5 0 5 0 5 0 0 0 0",
    "1 1 1 2 2 2 3 3 3 4 4 4 5 5 5 6 6 6 7 7 7 8 8 8 9",
    "1 -1 1 2 -2 2 3 -3 3 4 -4 4 5 -5 5 6 -6 6 7 -7 7 8 -8 8",
    "0 1 0 1 0 2 0 2 0 3 0 3 0 4 0 4 0 5 0 5 0 5 0 0 0 0",
    "1 0 1 0 2 0 2 0 3 0 3 0 4 0 4 0 5 0 5 0 5 0 0 0 0 0",
]



class Testing(unittest.TestCase):
    
    def test_all(self):
        global data
        for s in data:
            print(f"\"{s}\"")
            self.assertEqual(sign_pairs(s), _sign_pairs(s), f"Failed for {s}")


if __name__ == '__main__':
    unittest.main()

